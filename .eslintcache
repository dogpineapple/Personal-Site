[{"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx":"1","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx":"2","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx":"3","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx":"4","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx":"5","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx":"6","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx":"7","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx":"8","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx":"9","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx":"10","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx":"11","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx":"12","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx":"13","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx":"14","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx":"15","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx":"16","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx":"17","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx":"18","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts":"19","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx":"20","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx":"21","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx":"22","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx":"23","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx":"24","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx":"25","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx":"26","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx":"27","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx":"28","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx":"29","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx":"30","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx":"31","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx":"32","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx":"33","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Login/index.tsx":"34","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/index.tsx":"35","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/rootReducer.tsx":"36","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/actionCreators.tsx":"37","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/actionTypes.tsx":"38","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/Routes/index.tsx":"39","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/helpers.tsx":"40","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Login/index.tsx":"41","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx":"42","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/DeleteModal/index.tsx":"43","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/FavoriteButton/index.tsx":"44","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/Forms/BlogForm/index.tsx":"45","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/CommentCard/index.tsx":"46","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/SortSelection/index.tsx":"47","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/CommentReplyAccord/index.tsx":"48","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Homepage/index.tsx":"49","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/BlogList/index.tsx":"50","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/NavBar/index.tsx":"51","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/config.tsx":"52","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx":"53","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Register/index.tsx":"54","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/UserList/index.tsx":"55","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/EditFormModal/index.tsx":"56","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/BlogCard/index.tsx":"57","/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx":"58"},{"size":877,"mtime":1610183842259,"results":"59","hashOfConfig":"60"},{"size":2316,"mtime":1610501822895,"results":"61","hashOfConfig":"60"},{"size":1440,"mtime":1610496856262,"results":"62","hashOfConfig":"60"},{"size":3805,"mtime":1610496968631,"results":"63","hashOfConfig":"60"},{"size":1792,"mtime":1610422108585,"results":"64","hashOfConfig":"60"},{"size":786,"mtime":1610429011726,"results":"65","hashOfConfig":"60"},{"size":1434,"mtime":1610497142362,"results":"66","hashOfConfig":"60"},{"size":118,"mtime":1611104129648,"results":"67","hashOfConfig":"60"},{"size":1438,"mtime":1610258344932,"results":"68","hashOfConfig":"60"},{"size":3327,"mtime":1610671878556,"results":"69","hashOfConfig":"60"},{"size":569,"mtime":1610325790594,"results":"70","hashOfConfig":"60"},{"size":5800,"mtime":1610497412480,"results":"71","hashOfConfig":"60"},{"size":3122,"mtime":1610671439165,"results":"72","hashOfConfig":"60"},{"size":1398,"mtime":1610422038486,"results":"73","hashOfConfig":"60"},{"size":2287,"mtime":1610338236765,"results":"74","hashOfConfig":"60"},{"size":937,"mtime":1610491249475,"results":"75","hashOfConfig":"60"},{"size":1325,"mtime":1610423812245,"results":"76","hashOfConfig":"60"},{"size":659,"mtime":1610247961639,"results":"77","hashOfConfig":"60"},{"size":425,"mtime":1610058522094,"results":"78","hashOfConfig":"60"},{"size":2136,"mtime":1610427154580,"results":"79","hashOfConfig":"60"},{"size":2041,"mtime":1610425176737,"results":"80","hashOfConfig":"60"},{"size":979,"mtime":1610495344909,"results":"81","hashOfConfig":"60"},{"size":907,"mtime":1610491272929,"results":"82","hashOfConfig":"60"},{"size":864,"mtime":1610428813041,"results":"83","hashOfConfig":"60"},{"size":791,"mtime":1610428885433,"results":"84","hashOfConfig":"60"},{"size":2571,"mtime":1610428298354,"results":"85","hashOfConfig":"60"},{"size":7813,"mtime":1610428184335,"results":"86","hashOfConfig":"60"},{"size":1004,"mtime":1610429002240,"results":"87","hashOfConfig":"60"},{"size":1717,"mtime":1610448379609,"results":"88","hashOfConfig":"60"},{"size":1407,"mtime":1610450081846,"results":"89","hashOfConfig":"60"},{"size":1744,"mtime":1610427223853,"results":"90","hashOfConfig":"60"},{"size":1956,"mtime":1610428482302,"results":"91","hashOfConfig":"60"},{"size":2786,"mtime":1610498948443,"results":"92","hashOfConfig":"60"},{"size":2151,"mtime":1610427636433,"results":"93","hashOfConfig":"60"},{"size":1434,"mtime":1610497142362,"results":"94","hashOfConfig":"95"},{"size":3122,"mtime":1610671439165,"results":"96","hashOfConfig":"95"},{"size":5800,"mtime":1610497412480,"results":"97","hashOfConfig":"95"},{"size":569,"mtime":1610325790594,"results":"98","hashOfConfig":"95"},{"size":1407,"mtime":1610450081846,"results":"99","hashOfConfig":"95"},{"size":937,"mtime":1610491249475,"results":"100","hashOfConfig":"95"},{"size":2151,"mtime":1610427636433,"results":"101","hashOfConfig":"95"},{"size":7813,"mtime":1610428184335,"results":"102","hashOfConfig":"95"},{"size":907,"mtime":1610491272929,"results":"103","hashOfConfig":"95"},{"size":3327,"mtime":1610671878556,"results":"104","hashOfConfig":"95"},{"size":2041,"mtime":1610425176737,"results":"105","hashOfConfig":"95"},{"size":2664,"mtime":1610448354159,"results":"106","hashOfConfig":"95"},{"size":2251,"mtime":1611262169820,"results":"107","hashOfConfig":"95"},{"size":1717,"mtime":1610448379609,"results":"108","hashOfConfig":"95"},{"size":2114,"mtime":1611262145183,"results":"109","hashOfConfig":"95"},{"size":801,"mtime":1611215853858,"results":"110","hashOfConfig":"95"},{"size":2316,"mtime":1610501822895,"results":"111","hashOfConfig":"95"},{"size":117,"mtime":1611118235788,"results":"112","hashOfConfig":"95"},{"size":1004,"mtime":1610429002240,"results":"113","hashOfConfig":"95"},{"size":2571,"mtime":1610428298354,"results":"114","hashOfConfig":"95"},{"size":791,"mtime":1610428885433,"results":"115","hashOfConfig":"95"},{"size":979,"mtime":1610495344909,"results":"116","hashOfConfig":"95"},{"size":1792,"mtime":1610422108585,"results":"117","hashOfConfig":"95"},{"size":2786,"mtime":1611262249926,"results":"118","hashOfConfig":"95"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},"dka9vg",{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"125"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"125"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},"2kglrg",{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/App.tsx",["250"],"import React, { useEffect } from 'react';\nimport './App.css';\nimport './animations.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport PublicRoutes from './PublicRoutes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useDispatch } from 'react-redux';\nimport { getUserFavoritesFromAPI, getUserInfoFromAPI } from './redux/actionCreators';\nimport NavBar from './NavBar';\n\nfunction App() {\n  const userId = ((st: any) => st.user.id);\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetUser() {\n    const token = localStorage.getItem(\"token\");\n    if (token && !userId) {\n      dispatch(getUserInfoFromAPI(token));\n      dispatch(getUserFavoritesFromAPI(userId));\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar />\n        <PublicRoutes />\n      </BrowserRouter>\n    </div >\n  );\n}\n\nexport default App;\n",["251","252"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/NavBar/index.tsx",[],["253","254"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/LoginForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/SignUpForm/index.tsx",[],["255","256"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogCard/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/BlogList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/config.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SearchBar/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoriteButton/index.tsx",["257"],"import { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart as farHeart } from \"@fortawesome/free-regular-svg-icons\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./FavoriteButton.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFavoriteToAPI, deleteFavoriteFromAPI } from \"../redux/actionCreators\";\nimport { CustomReduxState, Post } from \"../custom\";\nimport { isFavorited } from \"../helpers\";\n\ninterface IProp {\n  post: Post\n}\n\n/**\n * `FavoriteButton` renders a Heart icon and displays the number of favorites for a post.\n *  *Only logged in users may use the button*\n * `FavoriteButton` handles the logic for dispatching `addFavoriteToAPI` and `deleteFavoriteFromAPI`\n */\nfunction FavoriteButton({ post }: IProp) {\n  const dispatch = useDispatch();\n  const favorites = useSelector((st: CustomReduxState) => st.favorites);\n  const [favorited, setFavorited] = useState<boolean>(false);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n\n  //**FIXED**: Fix issue where the setFavorited doesn't change when a user clicks \"unfavorite\"\n  // on the same post, but different card. \n  // ex. User clicks the FavoriteButton to unfavorite their published post: `post id 1` from the `Favorites List`.\n  // The `post id 1` card in their published post list is still solid.\n\n  // If the post is found in the redux store's `favorites` state, \n  // set favorited to true.\n  useEffect(function handleFavoriteStatus() {\n    if (isFavorited(post.id, favorites)) {\n      setFavorited(true);\n    } else {\n      // POST-SUBMISSION UPDATE: Add an else statement to setFavorited to false.\n      setFavorited(false);\n    }\n    // POST-SUBMISSION UPDATE: Add `favorites` to the dependency array to rerender when favorites changes.\n  }, [favorites]);\n\n  /**\n   * Dispatches action creators depending on `type` input.\n   * (Only allows logged in users to invoke dispatch)\n   */\n  const handleFavorites = async (type: string) => {\n    if (!localStorage.getItem(\"token\")) {\n      alert(\"Must be signed in to favorite.\");\n    } else {\n      let currFavCount = parseInt(post.favorite_count);\n      switch (type) {\n        case \"ADD\":\n          setFavorited(true);\n          dispatch(addFavoriteToAPI(post));\n          // if the redux store's `posts` state is empty, \n          //    the component need to manually update the favCount to display.\n          if (posts.length === 0) {\n            post.favorite_count = (currFavCount + 1).toString();\n          }\n          break;\n        case \"DELETE\":\n          setFavorited(false);\n          dispatch(deleteFavoriteFromAPI(post.id));\n          if (posts.length === 0) {\n            post.favorite_count = (currFavCount - 1).toString();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  return (\n    <div className=\"FavoriteButton d-flex align-items-center\">\n      { favorited ?\n        <FontAwesomeIcon className=\"FavoriteButton-btn\" icon={faHeart} size=\"1x\" onClick={() => handleFavorites(\"DELETE\")} />\n        :\n        <FontAwesomeIcon className=\"FavoriteButton-btn\" icon={farHeart} size=\"1x\" onClick={() => handleFavorites(\"ADD\")} />\n      }\n      <span>{post.favorite_count}</span>\n    </div>\n  );\n};\n\nexport default FavoriteButton;",["258","259"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionTypes.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/actionCreators.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/redux/rootReducer.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentCard/index.tsx",["260"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/helpers.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/CommentForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/FavoritesList/index.tsx",[],["261","262"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/reportWebVitals.ts",[],["263","264"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/SortSelection/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Forms/BlogForm/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/EditFormModal/index.tsx",[],["265","266"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/DeleteModal/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserCard/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/UserList/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Register/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx",["267"],"import React, { useEffect, useState, Fragment } from \"react\";\nimport { Alert, Button, Col, Container, Row } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router\";\nimport moment from \"moment\";\nimport CommentList from \"../../CommentList\";\nimport { BASE_URL } from \"../../config\";\nimport FavoriteButton from \"../../FavoriteButton\";\nimport \"./PostDetails.css\";\nimport { Post, Comment, CustomReduxState } from \"../../custom\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditFormModal from \"../../EditFormModal\";\nimport DeleteModal from \"../../DeleteModal\";\nimport { deletePostFromAPI, updateCurrentPost } from \"../../redux/actionCreators\";\nimport { changeToURLFriendly } from \"../../helpers\";\n\n/**\n * `PostDetails` renders a post's data in full and a `FavoriteButton` and a\n * `CommentList` components.\n *  Holds logic for creating API calls to...\n * - GET post by post id\n * - GET comment by post id\n * - PATCH post by post id (requires login and user is author)\n * - DELETE post by post id (requires login and user is author)\n */\nfunction PostDetails() {\n  const { postId } = useParams<{ postId: string, postTitle: string }>();\n  const currUser = useSelector((st: CustomReduxState) => st.user);\n  const posts = useSelector((st: CustomReduxState) => st.posts);\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Array<Comment>>([]);\n  const [isAuthor, setIsAuthor] = useState<boolean>(false);\n  const [serverErr, setServerErr] = useState<string>(\"\");\n  const [showEditForm, setShowEditForm] = useState<boolean>(false);\n  const [showDelConf, setShowDelConf] = useState<boolean>(false);\n  const _token = localStorage.getItem(\"token\");\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  useEffect(function handleGetPost() {\n    // retrieve the post from the API.\n    async function getPost() {\n      try {\n        const postRes = await fetch(`${BASE_URL}/posts/${postId}`);\n        const postData = await postRes.json();\n        setPost(postData.post);\n        setIsAuthor(postData.post.author_id === currUser.id);\n      } catch (err) {\n        setServerErr(\"This post either has been deleted or does not exist.\");\n      }\n    }\n\n    // retrieve the comments to the current post from API.\n    async function getComments() {\n      const commentsRes = await fetch(`${BASE_URL}/comments/${postId}`);\n      const commentsData = await commentsRes.json();\n      const commentsSortedByCreateDate = commentsData.comments.sort((a: Comment, b: Comment) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      setComments(commentsSortedByCreateDate);\n    }\n\n    // search for the post in the current redux store's `posts` state\n    let foundPost = posts.filter((p: Post) => {\n      return p.id === parseInt(postId);\n    })[0];\n\n    if (!foundPost) {\n      // if the post is not in the current redux store's `posts` state, call getPost()\n      getPost();\n    } else {\n      setIsAuthor(foundPost.author_id === currUser.id);\n      setPost(foundPost);\n    }\n    // retrieve comments for the post.\n    getComments();\n  }, [postId]);\n\n  const updatePost = async (data: Post) => {\n    setServerErr(\"\");\n    // requires user login to update a post\n    if (post && _token) {\n      const res = await fetch(`${BASE_URL}/posts/${post.id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ ...data, _token }),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      });\n      const resData = await res.json();\n      if (res.status === 200) {\n        // set the updatedPost to the `post` state.\n        let updatedPost = { ...post, ...data, ...resData }\n        setPost(updatedPost);\n        // send dispatch to update the current post in the redux store `posts` state.\n        dispatch(updateCurrentPost(updatedPost));\n      } else {\n        setServerErr(resData.message);\n      }\n    }\n  }\n  \n  const deletePost = async () => {\n    setServerErr(\"\");\n    if (post && _token) {\n      dispatch(deletePostFromAPI(post.id, _token));\n      history.push(\"/\");\n    }\n  }\n  \n  const postComment = async (postId: number, commentId: number | undefined, isReply: boolean, comment: string) => {\n    // requires user login to create a post.\n    if (post && _token) {\n      const newComment = {\n        body: comment,\n        post_id: postId,\n        reply_to_comment_id: commentId,\n        author_id: currUser.id,\n        is_reply: isReply\n      };\n      \n      setServerErr(\"\");\n      \n      try {\n        const res = await fetch(`${BASE_URL}/comments`, {\n          method: \"POST\",\n          body: JSON.stringify(newComment),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        });\n        const commentData = await res.json();\n        if (res.status === 201) {\n          // if the comment made is not a reply,\n          //   add comment to the current `comment` state\n          if (!isReply) {\n            setComments((currComments) => [...currComments,\n              {\n                ...newComment,\n                created_at: commentData.created_at,\n                id: commentData.id,\n                author_name: currUser.display_name,\n                reply_count: \"0\"\n              }]);\n            }\n          } else {\n            setServerErr(commentData.error.message);\n          }\n        } catch (err) {\n          setServerErr(\"Something went wrong with posting a comment\");\n        }\n      }\n    }\n    \n    const handleShowEdit = () => setShowEditForm(true);\n    const handleCloseEdit = () => setShowEditForm(false);\n    const handleCloseDel = () => setShowDelConf(false);\n    const handleShowDel = () => setShowDelConf(true);\n\n    return (\n      <div className=\"PostDetails mt-5\">\n      { showEditForm && <EditFormModal show={showEditForm} handleClose={handleCloseEdit} item={post} editItem={updatePost} />}\n      { showDelConf && <DeleteModal show={showDelConf} handleClose={handleCloseDel} deletePost={deletePost} />}\n      <Container >\n        {serverErr && <Alert variant=\"danger\">{serverErr}</Alert>}\n        {post &&\n          <Fragment>\n            <div className=\"PostDetails-post text-left\">\n              <Row className=\"d-flex justify-content-between\">\n                <Col md={9} className=\"d-flex align-items-center\">\n                  <h2 className=\"PostDetails-title\">{post.title} </h2>\n                  <FavoriteButton post={post} />\n                </Col>\n                {/** Edit/Delete buttons show only if current user is the author of the post */}\n                {isAuthor && <Col md={3} className=\"d-flex align-items-center justify-content-end\">\n                  <Button variant=\"info\" onClick={handleShowEdit}><FontAwesomeIcon icon={faEdit} /> Edit</Button>\n                  <Button variant=\"danger\" className=\"ml-3\" onClick={handleShowDel}><FontAwesomeIcon icon={faTrash} /> Delete</Button>\n                </Col>}\n              </Row>\n              <div className=\"text-muted\">{post.description}</div>\n              <div className=\"text-muted\">\n                Posted by <a href={`/users/${post.author_id}/${changeToURLFriendly(post.author_name)}/favorites`}><span className=\"App-author\">{post.author_name}</span></a> {moment(post.created_at).fromNow()}\n                {post.last_updated_at !== post.created_at && <span className=\"App-update\"> (last updated {moment(post.last_updated_at).fromNow()})</span>}</div>\n              <div className=\"PostDetails-body\">{post.body}</div>\n            </div>\n            <CommentList comments={comments} postId={post.id} postComment={postComment} />\n          </Fragment>\n        }\n      </Container>\n    </div>\n  );\n};\n\nexport default PostDetails;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/CommentReplyAccord/index.tsx",[],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/Routes/index.tsx",[],["268","269"],"/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Homepage/index.tsx",["270"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport { getPostsFromAPI } from \"../../redux/actionCreators\";\nimport SortSelection from \"../../SortSelection\";\n\n/**\n * `Homepage` renders `BlogList` and `SortSelection` components.\n * If posts do not exist in current redux store, it dispatches an action to\n * `getPostsFromAPI`.\n */\nfunction Homepage() {\n  const postsList = useSelector((st: CustomReduxState) => st.posts.sort((a: Post, b: Post) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()));\n  const dispatch = useDispatch();\n  const [posts, setPosts] = useState<Array<Post>>([]);\n  const [sortType, setSortType] = useState(\"mostRecent\")\n\n  useEffect(function handleLoadPosts() {\n    if (postsList.length === 0) {\n      dispatch(getPostsFromAPI());\n    } else {\n      setPosts(postsList);\n    }\n  }, [postsList]);\n\n  // invoked in `SortSelection` component when a user chooses a sort type in the dropdown.\n  const handlePostSort = (sortedPosts: Array<Post>, newSortType: string) => {\n    setPosts(sortedPosts);\n    setSortType(newSortType);\n  }\n\n  return (\n    <div className=\"Homepage\">\n      <Container>\n        <Row className=\"mt-4\">\n          <Col md={12} className=\"d-flex align-items-center justify-content-between\">\n            <h1 className=\"text-left\">Bloggies newsfeed</h1>\n            <SortSelection handlePostSort={handlePostSort} posts={postsList} />\n          </Col>\n        </Row>\n        <BlogList key={sortType} posts={posts} />\n      </Container>\n    </div>\n  );\n};\n\nexport default Homepage;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/SearchResults/index.tsx",["271"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport BlogList from \"../../BlogList\";\nimport { CustomReduxState } from \"../../custom\";\nimport { getSearchResultsFromAPI } from \"../../redux/actionCreators\";\nimport UserList from \"../../UserList\";\n\n/**\n * `SearchResults` renders the page for the search results from a searched term.\n * Displays the `BlogList` and `UserList` and passes the postsResults and userResults to \n * the child components to show the Post and User objects.\n */\nfunction SearchResults() {\n  const postsResults = useSelector((st: CustomReduxState) => st.searchResults.posts);\n  const usersResults = useSelector((st: CustomReduxState) => st.searchResults.users);\n  const [isSearched, setIsSearched] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  // get the query value for \"term\" to display or \n  // search backend if user has altered url instead of using search bar.\n  const search = window.location.search;\n  const params = new URLSearchParams(search);\n  const searchTerm = params.get(\"term\");\n  \n  useEffect(function handleSearch() {\n    // if the user alters the URL, the component will dispatch\n    // `getSearchResultsFromAPI` with the searchTerm retrieved\n    // from the URL query params.\n    if (!isSearched) {\n      if (searchTerm) {\n        dispatch(getSearchResultsFromAPI(searchTerm));\n      }\n      setIsSearched(true);\n    }\n  }, []);\n\n  return (\n    <Container className=\"SearchResults text-left\">\n      <h1 className=\"mt-3\">Search results for '{searchTerm}'</h1>\n      <Row className=\"mt-5\">\n        <Col md={8}>\n          <h3>Posts results</h3>\n          <BlogList posts={postsResults} />\n        </Col>\n        <Col md={4}>\n          <h3>Users results</h3>\n          <UserList users={usersResults} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default SearchResults;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx",["272"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Alert } from \"react-bootstrap\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router\";\nimport BlogList from \"../../BlogList\";\nimport { BASE_URL } from \"../../config\";\nimport { CustomReduxState, Post } from \"../../custom\";\nimport FavoritesList from \"../../FavoritesList\";\nimport \"./UserProfile.css\";\n\n/**\n * `UserProfile` renders the page for displaying a user's `FavoritesList` and \n * Publications (`BlogList`).\n */\nfunction UserProfile() {\n  const currUserId = useSelector((st: CustomReduxState) => st.user.id);\n  const { userId, displayName } = useParams<{ userId: string, displayName: string }>();\n  const [isCurrUserProfile, setIsCurrUserProfile] = useState<boolean>(false);\n  const currUserFavs = useSelector((st: CustomReduxState) => st.favorites);\n  const [userFavs, setUserFavs] = useState<Array<Post>>([]);\n  const [userPosts, setUserPosts] = useState<Array<Post>>([]);\n  const [serverErr, setServerErr] = useState(\"\");\n\n  useEffect(function checkProfileOwner() {\n    // retrieve user favorites by a GET request with user id from params.\n    async function getUserFavorites() {\n      try {\n        const favRes = await fetch(`${BASE_URL}/favorites/${userId}`);\n        const favData = await favRes.json();\n        setUserFavs(favData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // retrieve user publications by a GET request with user id from params.\n    async function getUserPosts() {\n      try {\n        const userPostsRes = await fetch(`${BASE_URL}/posts/user/${userId}`);\n        const userPostsData = await userPostsRes.json();\n        setUserPosts(userPostsData.posts);\n      } catch (err) {\n        setServerErr(\"This user does not exist.\");\n      }\n    }\n\n    // if profile belongs to the current user, use redux data.\n    if (parseInt(userId) === currUserId) {\n      setIsCurrUserProfile(true);\n      getUserPosts();\n    } else {\n      // if not current user's profile, fetch the data from backend.\n      getUserFavorites();\n      getUserPosts();\n    }\n  }, [userId]);\n\n  return (\n    <Container className=\"UserProfile\">\n      <h1 className=\"mt-4\">{displayName.replaceAll(\"-\", \" \")}'s profile</h1>\n      { serverErr && <Alert>{serverErr}</Alert>}\n      <Row>\n        <Col md={6}>\n          <Container>\n            <Row>\n              <h3 className=\"mt-4\">Publications</h3>\n            </Row>\n            <Row>\n              <BlogList posts={userPosts} />\n            </Row>\n          </Container>\n        </Col>\n        <Col md={6}>\n          <FavoritesList favorites={isCurrUserProfile ? currUserFavs : userFavs} />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default UserProfile;","/Users/dogsarecute/Desktop/Onramp/onramp-fullstack-CRUD-project-main/bloggies_frontend/src/RoutedPages/Login/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/index.tsx",[],["273","274"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/rootReducer.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/actionCreators.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/redux/actionTypes.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/Routes/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/helpers.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Login/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/PostDetails/index.tsx",["275"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/DeleteModal/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/FavoriteButton/index.tsx",["276"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/Forms/BlogForm/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/CommentCard/index.tsx",["277"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/SortSelection/index.tsx",["278"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/CommentReplyAccord/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Homepage/index.tsx",["279"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/BlogList/index.tsx",["280"],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/NavBar/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/config.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/ComposePage/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/Register/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/UserList/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/EditFormModal/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/BlogCard/index.tsx",[],"/Users/dogsarecute/Desktop/Projects/bloggies_frontend/src/RoutedPages/UserProfile/index.tsx",["281"],{"ruleId":"282","severity":1,"message":"283","line":21,"column":6,"nodeType":"284","endLine":21,"endColumn":8,"suggestions":"285"},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"286","replacedBy":"290"},{"ruleId":"288","replacedBy":"291"},{"ruleId":"286","replacedBy":"292"},{"ruleId":"288","replacedBy":"293"},{"ruleId":"282","severity":1,"message":"294","line":41,"column":6,"nodeType":"284","endLine":41,"endColumn":17,"suggestions":"295"},{"ruleId":"286","replacedBy":"296"},{"ruleId":"288","replacedBy":"297"},{"ruleId":"282","severity":1,"message":"298","line":25,"column":6,"nodeType":"284","endLine":25,"endColumn":8,"suggestions":"299"},{"ruleId":"286","replacedBy":"300"},{"ruleId":"288","replacedBy":"301"},{"ruleId":"286","replacedBy":"302"},{"ruleId":"288","replacedBy":"303"},{"ruleId":"286","replacedBy":"304"},{"ruleId":"288","replacedBy":"305"},{"ruleId":"282","severity":1,"message":"306","line":76,"column":6,"nodeType":"284","endLine":76,"endColumn":14,"suggestions":"307"},{"ruleId":"286","replacedBy":"308"},{"ruleId":"288","replacedBy":"309"},{"ruleId":"282","severity":1,"message":"283","line":26,"column":6,"nodeType":"284","endLine":26,"endColumn":17,"suggestions":"310"},{"ruleId":"282","severity":1,"message":"311","line":36,"column":6,"nodeType":"284","endLine":36,"endColumn":8,"suggestions":"312"},{"ruleId":"282","severity":1,"message":"313","line":56,"column":6,"nodeType":"284","endLine":56,"endColumn":14,"suggestions":"314"},{"ruleId":"286","replacedBy":"315"},{"ruleId":"288","replacedBy":"316"},{"ruleId":"282","severity":1,"message":"306","line":76,"column":6,"nodeType":"284","endLine":76,"endColumn":14,"suggestions":"317"},{"ruleId":"282","severity":1,"message":"294","line":41,"column":6,"nodeType":"284","endLine":41,"endColumn":17,"suggestions":"318"},{"ruleId":"282","severity":1,"message":"298","line":26,"column":6,"nodeType":"284","endLine":26,"endColumn":8,"suggestions":"319"},{"ruleId":"282","severity":1,"message":"320","line":21,"column":6,"nodeType":"284","endLine":21,"endColumn":13,"suggestions":"321"},{"ruleId":"282","severity":1,"message":"322","line":30,"column":6,"nodeType":"284","endLine":30,"endColumn":8,"suggestions":"323"},{"ruleId":"324","severity":1,"message":"325","line":1,"column":17,"nodeType":"326","messageId":"327","endLine":1,"endColumn":26},{"ruleId":"282","severity":1,"message":"313","line":56,"column":6,"nodeType":"284","endLine":56,"endColumn":14,"suggestions":"328"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["329"],"no-native-reassign",["330"],"no-negated-in-lhs",["331"],["330"],["331"],["330"],["331"],"React Hook useEffect has a missing dependency: 'post.id'. Either include it or remove the dependency array.",["332"],["330"],["331"],"React Hook useEffect has a missing dependency: 'comment.reply_count'. Either include it or remove the dependency array. If 'setReplyCount' needs the current value of 'comment.reply_count', you can also switch to useReducer instead of useState and read 'comment.reply_count' in the reducer.",["333"],["330"],["331"],["330"],["331"],["330"],["331"],"React Hook useEffect has missing dependencies: 'currUser.id' and 'posts'. Either include them or remove the dependency array.",["334"],["330"],["331"],["335"],"React Hook useEffect has missing dependencies: 'dispatch', 'isSearched', and 'searchTerm'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has a missing dependency: 'currUserId'. Either include it or remove the dependency array.",["337"],["330"],["331"],["338"],["339"],["340"],"React Hook useEffect has missing dependencies: 'currentSort' and 'handleSelection'. Either include them or remove the dependency array.",["341"],"React Hook useEffect has missing dependencies: 'dispatch' and 'postsList'. Either include them or remove the dependency array.",["342"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["343"],{"desc":"344","fix":"345"},"no-global-assign","no-unsafe-negation",{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"350","fix":"358"},{"desc":"346","fix":"359"},{"desc":"348","fix":"360"},{"desc":"361","fix":"362"},{"desc":"352","fix":"363"},{"desc":"356","fix":"364"},"Update the dependencies array to be: [dispatch]",{"range":"365","text":"366"},"Update the dependencies array to be: [favorites, post.id]",{"range":"367","text":"368"},"Update the dependencies array to be: [comment.reply_count]",{"range":"369","text":"370"},"Update the dependencies array to be: [currUser.id, postId, posts]",{"range":"371","text":"372"},"Update the dependencies array to be: [dispatch, postsList]",{"range":"373","text":"374"},"Update the dependencies array to be: [dispatch, isSearched, searchTerm]",{"range":"375","text":"376"},"Update the dependencies array to be: [currUserId, userId]",{"range":"377","text":"378"},{"range":"379","text":"372"},{"range":"380","text":"368"},{"range":"381","text":"370"},"Update the dependencies array to be: [currentSort, handleSelection, posts]",{"range":"382","text":"383"},{"range":"384","text":"374"},{"range":"385","text":"378"},[705,707],"[dispatch]",[1851,1862],"[favorites, post.id]",[880,882],"[comment.reply_count]",[3253,3261],"[currUser.id, postId, posts]",[1035,1046],"[dispatch, postsList]",[1498,1500],"[dispatch, isSearched, searchTerm]",[2146,2154],"[currUserId, userId]",[3253,3261],[1851,1862],[987,989],[618,625],"[currentSort, handleSelection, posts]",[1406,1408],[2146,2154]]